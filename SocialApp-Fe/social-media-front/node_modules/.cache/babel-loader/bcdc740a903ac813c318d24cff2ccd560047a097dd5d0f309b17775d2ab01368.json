{"ast":null,"code":"var _jsxFileName = \"D:\\\\an3_facultate\\\\sem1\\\\IS\\\\laboratoare\\\\SocialApp-Fe\\\\social-media-front\\\\src\\\\components\\\\messaging\\\\ChatOverview\\\\ChatOverview.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Stomp } from '@stomp/stompjs';\nimport { messageSelect } from \"../../../widgets/messaging-overview-widget/model/selectors\";\nimport { updateMessages } from '../../../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatOverview = () => {\n  _s();\n  const currentConversation = useSelector(messageSelect.currentConversation);\n  const dispatch = useDispatch();\n  const jwtToken = useSelector(sessionSelect.jwtToken);\n  const messages = useSelector(messageSelect.currentChat);\n  const myUserId = useSelector(sessionSelect.userId);\n  const [message, setMessage] = useState('');\n  const [connected, setConnected] = useState(false);\n  const connect = () => {\n    const socket = new WebSocket(`ws://localhost:8083/chat/websocket?token=${jwtToken}`);\n    const stompClient = Stomp.over(socket);\n    stompClient.debug = console.log;\n    stompClient.connect({}, () => {\n      setConnected(true);\n      console.log('Connected: ' + stompClient.connected);\n\n      // Subscribing to personal queues based on userId\n      const personalQueue = `/user/queue/${myUserId}/${currentConversation.userId}`;\n      stompClient.subscribe(personalQueue, message => {\n        console.log(\"Received personal message\", message.body);\n        dispatch(updateMessages());\n      });\n    }, error => {\n      console.error('Connection error:', error);\n    });\n    return stompClient;\n  };\n  const disconnect = stompClient => {\n    if (connected) {\n      stompClient.disconnect(() => {\n        console.log(\"Disconnected\");\n        setConnected(false);\n      });\n    }\n  };\n  const sendMessage = stompClient => {\n    if (connected) {\n      const messagePayload = {\n        senderId: myUserId,\n        receiverId: currentConversation.userId,\n        content: message,\n        timestamp: new Date().toISOString()\n      };\n      stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(messagePayload));\n      setMessage('');\n      dispatch(updateMessages());\n    }\n  };\n  useEffect(() => {\n    const stompClient = connect();\n    return () => {\n      disconnect(stompClient);\n    };\n  }, [currentConversation.userId]);\n  const onMessageChange = event => {\n    setMessage(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.senderId === myUserId ? 'my-message' : 'their-message'}`,\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: onMessageChange,\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMessage,\n        disabled: !message,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatOverview, \"0573yiddQPGdRh8UBgfm0mGfYag=\", false, function () {\n  return [useSelector, useDispatch, useSelector, useSelector, useSelector];\n});\n_c = ChatOverview;\nexport default ChatOverview;\nvar _c;\n$RefreshReg$(_c, \"ChatOverview\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","Stomp","messageSelect","updateMessages","jsxDEV","_jsxDEV","ChatOverview","_s","currentConversation","dispatch","jwtToken","sessionSelect","messages","currentChat","myUserId","userId","message","setMessage","connected","setConnected","connect","socket","WebSocket","stompClient","over","debug","console","log","personalQueue","subscribe","body","error","disconnect","sendMessage","messagePayload","senderId","receiverId","content","timestamp","Date","toISOString","send","JSON","stringify","onMessageChange","event","target","value","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/an3_facultate/sem1/IS/laboratoare/SocialApp-Fe/social-media-front/src/components/messaging/ChatOverview/ChatOverview.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CompatClient, Stomp } from '@stomp/stompjs';\r\nimport {messageSelect} from \"../../../widgets/messaging-overview-widget/model/selectors\";\r\n\r\nimport { updateMessages } from '../../../redux/actions';\r\n\r\nconst ChatOverview = () => {\r\n    const currentConversation = useSelector(messageSelect.currentConversation);\r\n    const dispatch = useDispatch();\r\n    const jwtToken = useSelector(sessionSelect.jwtToken);\r\n    const messages = useSelector(messageSelect.currentChat);\r\n    const myUserId = useSelector(sessionSelect.userId);\r\n    const [message, setMessage] = useState('');\r\n    const [connected, setConnected] = useState(false);\r\n\r\n    const connect = () => {\r\n        const socket = new WebSocket(`ws://localhost:8083/chat/websocket?token=${jwtToken}`);\r\n        const stompClient = Stomp.over(socket);\r\n        stompClient.debug = console.log;\r\n\r\n        stompClient.connect({}, () => {\r\n            setConnected(true);\r\n            console.log('Connected: ' + stompClient.connected);\r\n\r\n            // Subscribing to personal queues based on userId\r\n            const personalQueue = `/user/queue/${myUserId}/${currentConversation.userId}`;\r\n            stompClient.subscribe(personalQueue, message => {\r\n                console.log(\"Received personal message\", message.body);\r\n                dispatch(updateMessages());\r\n            });\r\n        }, (error: any) => {\r\n            console.error('Connection error:', error);\r\n        });\r\n\r\n        return stompClient;\r\n    };\r\n\r\n    const disconnect = (stompClient: CompatClient) => {\r\n        if (connected) {\r\n            stompClient.disconnect(() => {\r\n                console.log(\"Disconnected\");\r\n                setConnected(false);\r\n            });\r\n        }\r\n    };\r\n\r\n    const sendMessage = (stompClient: CompatClient) => {\r\n        if (connected) {\r\n            const messagePayload = {\r\n                senderId: myUserId,\r\n                receiverId: currentConversation.userId,\r\n                content: message,\r\n                timestamp: new Date().toISOString()\r\n            };\r\n            stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(messagePayload));\r\n            setMessage('');\r\n            dispatch(updateMessages());\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const stompClient = connect();\r\n        return () => {\r\n            disconnect(stompClient);\r\n        };\r\n    }, [currentConversation.userId]);\r\n\r\n    const onMessageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setMessage(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-messages\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.senderId === myUserId ? 'my-message' : 'their-message'}`}>\r\n                        {msg.content}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"message-input\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={onMessageChange}\r\n                    placeholder=\"Type a message...\"\r\n                />\r\n                <button onClick={() => sendMessage} disabled={!message}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatOverview;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}