{"ast":null,"code":"import { request } from \"../../../components/core/Request/request\";\nimport { CONNECTIONS_BASE_URL, CONTENT_BASE_URL, USER_BASE_URL } from \"../../../utils/constants\";\nimport { addConnection, addPosts, addStreak, refreshProfile } from \"./reducers\";\nexport const dataRequested = async ({\n  userId,\n  myUserId,\n  jwtToken,\n  dispatch\n}) => {\n  await request({\n    url: USER_BASE_URL + '/user/getSession/' + userId,\n    method: 'GET',\n    headers: {\n      'Access-Control-Allow-Origin': '*'\n    }\n  }).then(response => {\n    dispatch(refreshProfile({\n      userId: response.data.userId,\n      profilePicture: response.data.profilePicture,\n      fullName: response.data.firstName + ' ' + response.data.lastName,\n      username: response.data.username,\n      bio: response.data.bio,\n      isPrivate: response.data.isPrivate\n    }));\n  }).catch(err => console.error(err));\n  await request({\n    url: CONTENT_BASE_URL + '/getUserPosts/' + userId,\n    method: 'GET',\n    headers: {\n      'Authorization': \"Bearer \" + jwtToken\n    }\n  }).then(response => {\n    dispatch(addPosts(response.data));\n  }).catch(error => {\n    console.error(error);\n  });\n  await request({\n    url: CONNECTIONS_BASE_URL + '/getUserStreak/' + userId,\n    method: 'GET',\n    headers: {\n      Authorization: \"Bearer \" + jwtToken\n    }\n  }).then(response => {\n    dispatch(addStreak(response.data));\n  }).catch(error => {\n    console.error(error);\n  });\n  await request({\n    url: CONNECTIONS_BASE_URL + '/getConnectionType/' + myUserId + '/' + userId,\n    method: 'GET',\n    headers: {\n      Authorization: \"Bearer \" + jwtToken\n    }\n  }).then(response => {\n    dispatch(addConnection(response.data));\n  }).catch(error => {\n    console.error(error);\n  });\n};\nexport const followUnfollow = async ({\n  userId,\n  myUserId,\n  jwtToken,\n  dispatch\n}) => {\n  await request({\n    url: CONNECTIONS_BASE_URL + '/getConnectionTypeAndUpdateConnection/' + myUserId + '/' + userId,\n    method: 'POST',\n    headers: {\n      'Authorization': \"Bearer \" + jwtToken\n    }\n  }).then(() => {\n    dataRequested({\n      userId,\n      myUserId,\n      jwtToken,\n      dispatch\n    });\n  }).catch(error => {\n    console.error(error);\n  });\n};","map":{"version":3,"names":["request","CONNECTIONS_BASE_URL","CONTENT_BASE_URL","USER_BASE_URL","addConnection","addPosts","addStreak","refreshProfile","dataRequested","userId","myUserId","jwtToken","dispatch","url","method","headers","then","response","data","profilePicture","fullName","firstName","lastName","username","bio","isPrivate","catch","err","console","error","Authorization","followUnfollow"],"sources":["D:/an3_facultate/sem1/IS/laboratoare/SocialApp-Fe/social-media-front/src/widgets/profile-overview-widget/model/effects.ts"],"sourcesContent":["import {request} from \"../../../components/core/Request/request\";\r\nimport {CONNECTIONS_BASE_URL, CONTENT_BASE_URL, USER_BASE_URL} from \"../../../utils/constants\";\r\nimport {addConnection, addPosts, addStreak, refreshProfile} from \"./reducers\";\r\nimport {ProfileEffectsPayload} from \"./types\";\r\n\r\nexport const dataRequested = async({userId, myUserId, jwtToken, dispatch}: ProfileEffectsPayload) => {\r\n    await request({\r\n        url: USER_BASE_URL + '/user/getSession/' + userId,\r\n        method: 'GET',\r\n        headers: {\r\n            'Access-Control-Allow-Origin': '*'\r\n        }\r\n    }).then((response) => {\r\n        dispatch(refreshProfile({\r\n            userId: response.data.userId,\r\n            profilePicture: response.data.profilePicture,\r\n            fullName: response.data.firstName + ' ' + response.data.lastName,\r\n            username: response.data.username,\r\n            bio: response.data.bio,\r\n            isPrivate: response.data.isPrivate\r\n        }));\r\n    }).catch((err) => console.error(err));\r\n\r\n    await request({\r\n        url: CONTENT_BASE_URL + '/getUserPosts/' + userId,\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization' : \"Bearer \" + jwtToken\r\n        }\r\n    }).then((response) => {\r\n        dispatch(addPosts(response.data));\r\n    }).catch((error) => {\r\n        console.error(error);\r\n    })\r\n\r\n    await request({\r\n        url: CONNECTIONS_BASE_URL + '/getUserStreak/' + userId,\r\n        method: 'GET',\r\n        headers: {\r\n            Authorization : \"Bearer \" + jwtToken\r\n        }\r\n    }).then((response) => {\r\n        dispatch(addStreak(response.data));\r\n    }).catch((error) => {\r\n        console.error(error);\r\n    })\r\n\r\n    await request({\r\n        url: CONNECTIONS_BASE_URL + '/getConnectionType/' + myUserId + '/' + userId,\r\n        method: 'GET',\r\n        headers: {\r\n            Authorization : \"Bearer \" + jwtToken\r\n        }\r\n    }).then((response) => {\r\n        dispatch(addConnection(response.data));\r\n    }).catch((error) => {\r\n        console.error(error);\r\n    })\r\n}\r\n\r\nexport const followUnfollow = async({userId, myUserId, jwtToken, dispatch}: ProfileEffectsPayload) => {\r\n    await request({\r\n        url: CONNECTIONS_BASE_URL + '/getConnectionTypeAndUpdateConnection/' + myUserId + '/' + userId,\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization' : \"Bearer \" + jwtToken\r\n        }\r\n    }).then(() => {\r\n        dataRequested({userId, myUserId, jwtToken, dispatch});\r\n    }).catch((error) => {\r\n        console.error(error);\r\n    })\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}