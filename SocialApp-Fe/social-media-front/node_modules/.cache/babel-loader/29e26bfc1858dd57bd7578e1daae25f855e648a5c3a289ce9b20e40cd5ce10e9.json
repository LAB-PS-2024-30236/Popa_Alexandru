{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { defaultConv } from \"./defaultState\";\nconst messageSlice = createSlice({\n  name: 'messageState',\n  initialState: defaultConv,\n  reducers: {\n    conversationsSuccess: (state, action) => {\n      state.conversations = action.payload;\n    },\n    personChatsSuccess: (state, action) => {\n      state.chats = action.payload;\n    },\n    changeConversation: (state, action) => {\n      state.currentConversation = action.payload;\n    },\n    // Reducer to handle appending new messages to the current chat\n    updateChatMessages: (state, action) => {\n      const currentChatIndex = state.chats.findIndex(chat => chat.userId === state.currentConversation.userId);\n      if (currentChatIndex >= 0) {\n        state.chats[currentChatIndex].messages.push(action.payload);\n      }\n    }\n  }\n});\nexport const {\n  conversationsSuccess,\n  personChatsSuccess,\n  changeConversation,\n  updateChatMessages\n} = messageSlice.actions;\nexport default messageSlice.reducer;","map":{"version":3,"names":["createSlice","defaultConv","messageSlice","name","initialState","reducers","conversationsSuccess","state","action","conversations","payload","personChatsSuccess","chats","changeConversation","currentConversation","updateChatMessages","currentChatIndex","findIndex","chat","userId","messages","push","actions","reducer"],"sources":["D:/an3_facultate/sem1/IS/laboratoare/SocialApp-Fe/social-media-front/src/widgets/messaging-overview-widget/model/reducers.ts"],"sourcesContent":["import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {defaultConv} from \"./defaultState\";\r\nimport {Chat, Message} from \"./types\";\r\nimport {User} from \"../../../types/user\";\r\n\r\nconst messageSlice = createSlice({\r\n    name: 'messageState',\r\n    initialState: defaultConv,\r\n    reducers: {\r\n        conversationsSuccess: (state, action: PayloadAction<Message[]>) => {\r\n            state.conversations = action.payload;\r\n        },\r\n        personChatsSuccess: (state, action: PayloadAction<Chat[]>) => {\r\n            state.chats = action.payload;\r\n        },\r\n        changeConversation: (state, action: PayloadAction<User>) => {\r\n            state.currentConversation = action.payload;\r\n        },\r\n        // Reducer to handle appending new messages to the current chat\r\n        updateChatMessages: (state, action: PayloadAction<Message>) => {\r\n            const currentChatIndex = state.chats.findIndex(chat =>\r\n                chat.userId === state.currentConversation.userId);\r\n            if (currentChatIndex >= 0) {\r\n                state.chats[currentChatIndex].messages.push(action.payload);\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const { conversationsSuccess, personChatsSuccess, changeConversation, updateChatMessages } = messageSlice.actions;\r\nexport default messageSlice.reducer;"],"mappings":"AAAA,SAAQA,WAAW,QAAsB,kBAAkB;AAC3D,SAAQC,WAAW,QAAO,gBAAgB;AAI1C,MAAMC,YAAY,GAAGF,WAAW,CAAC;EAC7BG,IAAI,EAAE,cAAc;EACpBC,YAAY,EAAEH,WAAW;EACzBI,QAAQ,EAAE;IACNC,oBAAoB,EAAEA,CAACC,KAAK,EAAEC,MAAgC,KAAK;MAC/DD,KAAK,CAACE,aAAa,GAAGD,MAAM,CAACE,OAAO;IACxC,CAAC;IACDC,kBAAkB,EAAEA,CAACJ,KAAK,EAAEC,MAA6B,KAAK;MAC1DD,KAAK,CAACK,KAAK,GAAGJ,MAAM,CAACE,OAAO;IAChC,CAAC;IACDG,kBAAkB,EAAEA,CAACN,KAAK,EAAEC,MAA2B,KAAK;MACxDD,KAAK,CAACO,mBAAmB,GAAGN,MAAM,CAACE,OAAO;IAC9C,CAAC;IACD;IACAK,kBAAkB,EAAEA,CAACR,KAAK,EAAEC,MAA8B,KAAK;MAC3D,MAAMQ,gBAAgB,GAAGT,KAAK,CAACK,KAAK,CAACK,SAAS,CAACC,IAAI,IAC/CA,IAAI,CAACC,MAAM,KAAKZ,KAAK,CAACO,mBAAmB,CAACK,MAAM,CAAC;MACrD,IAAIH,gBAAgB,IAAI,CAAC,EAAE;QACvBT,KAAK,CAACK,KAAK,CAACI,gBAAgB,CAAC,CAACI,QAAQ,CAACC,IAAI,CAACb,MAAM,CAACE,OAAO,CAAC;MAC/D;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEJ,oBAAoB;EAAEK,kBAAkB;EAAEE,kBAAkB;EAAEE;AAAmB,CAAC,GAAGb,YAAY,CAACoB,OAAO;AACxH,eAAepB,YAAY,CAACqB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}