{"ast":null,"code":"var _jsxFileName = \"D:\\\\an3_facultate\\\\sem1\\\\IS\\\\laboratoare\\\\SocialApp-Fe\\\\social-media-front\\\\src\\\\widgets\\\\post-create-widget\\\\PostCreateWidget.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport Line from \"../../components/core/Line/Line\";\nimport { createPost } from \"./model/effects\";\nimport { sessionSelect } from \"../../redux/core/session/selectors\";\nimport { OurUploadDropzone } from \"../../utils/uploadthing\";\nimport './PostCreateWidget.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostCreateWidget = () => {\n  _s();\n  const userId = useSelector(sessionSelect.userId);\n  const [photo, setPhoto] = useState('');\n  const [description, setDescription] = useState('');\n  const datePosted = new Date().toISOString().split('T')[0];\n  const dispatch = useDispatch();\n  const handleDescriptionChange = event => setDescription(event.target.value);\n  const handleSubmit = async () => {\n    if (!photo) {\n      alert(\"Please upload a photo before submitting.\");\n      return;\n    }\n    await createPost({\n      userId,\n      photo,\n      datePosted,\n      description,\n      dispatch\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"widget-main-create\",\n    children: [/*#__PURE__*/_jsxDEV(OurUploadDropzone, {\n      endpoint: \"https://api.yourserver.com/upload\" // Replace with your actual upload endpoint\n      ,\n      onClientUploadComplete: res => {\n        setPhoto(res.url); // Make sure that the server responds with an object that includes `url`\n        alert(\"Upload Completed\");\n      },\n      onUploadError: error => {\n        alert(`ERROR! ${error.message}`);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Description\",\n        type: \"text\",\n        onChange: handleDescriptionChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        children: \"Create Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(PostCreateWidget, \"iwBjhv44kypHnHUbbHRjiUXvWcU=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = PostCreateWidget;\nexport default PostCreateWidget;\nvar _c;\n$RefreshReg$(_c, \"PostCreateWidget\");","map":{"version":3,"names":["React","useState","useDispatch","useSelector","Button","Line","createPost","sessionSelect","OurUploadDropzone","jsxDEV","_jsxDEV","PostCreateWidget","_s","userId","photo","setPhoto","description","setDescription","datePosted","Date","toISOString","split","dispatch","handleDescriptionChange","event","target","value","handleSubmit","alert","className","children","endpoint","onClientUploadComplete","res","url","onUploadError","error","message","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","type","onChange","onClick","_c","$RefreshReg$"],"sources":["D:/an3_facultate/sem1/IS/laboratoare/SocialApp-Fe/social-media-front/src/widgets/post-create-widget/PostCreateWidget.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Line from \"../../components/core/Line/Line\";\r\nimport { createPost } from \"./model/effects\";\r\nimport { sessionSelect } from \"../../redux/core/session/selectors\";\r\nimport { OurUploadDropzone } from \"../../utils/uploadthing\";\r\nimport './PostCreateWidget.css';\r\n\r\nconst PostCreateWidget: React.FC = () => {\r\n    const userId = useSelector(sessionSelect.userId);\r\n    const [photo, setPhoto] = useState<string>('');\r\n    const [description, setDescription] = useState<string>('');\r\n\r\n    const datePosted = new Date().toISOString().split('T')[0];\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => setDescription(event.target.value);\r\n\r\n    const handleSubmit = async () => {\r\n        if (!photo) {\r\n            alert(\"Please upload a photo before submitting.\");\r\n            return;\r\n        }\r\n        await createPost({\r\n            userId, photo, datePosted, description, dispatch\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className='widget-main-create'>\r\n            <OurUploadDropzone\r\n                endpoint=\"https://api.yourserver.com/upload\"  // Replace with your actual upload endpoint\r\n                onClientUploadComplete={(res) => {\r\n                    setPhoto(res.url);  // Make sure that the server responds with an object that includes `url`\r\n                    alert(\"Upload Completed\");\r\n                }}\r\n                onUploadError={(error) => {\r\n                    alert(`ERROR! ${error.message}`);\r\n                }}\r\n            />\r\n            <div>\r\n                <input\r\n                    placeholder=\"Description\"\r\n                    type='text'\r\n                    onChange={handleDescriptionChange}\r\n                />\r\n                <Button onClick={handleSubmit}>Create Post</Button>\r\n                <Line/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostCreateWidget;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,MAAM,QAAQ,iBAAiB;AACxC,OAAOC,IAAI,MAAM,iCAAiC;AAClD,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,aAAa,QAAQ,oCAAoC;AAClE,SAASC,iBAAiB,QAAQ,yBAAyB;AAC3D,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,gBAA0B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAMC,MAAM,GAAGV,WAAW,CAACI,aAAa,CAACM,MAAM,CAAC;EAChD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAS,EAAE,CAAC;EAE1D,MAAMiB,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACzD,MAAMC,QAAQ,GAAGpB,WAAW,CAAC,CAAC;EAE9B,MAAMqB,uBAAuB,GAAIC,KAA0C,IAAKP,cAAc,CAACO,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAElH,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACb,KAAK,EAAE;MACRc,KAAK,CAAC,0CAA0C,CAAC;MACjD;IACJ;IACA,MAAMtB,UAAU,CAAC;MACbO,MAAM;MAAEC,KAAK;MAAEI,UAAU;MAAEF,WAAW;MAAEM;IAC5C,CAAC,CAAC;EACN,CAAC;EAED,oBACIZ,OAAA;IAAKmB,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAC/BpB,OAAA,CAACF,iBAAiB;MACduB,QAAQ,EAAC,mCAAmC,CAAE;MAAA;MAC9CC,sBAAsB,EAAGC,GAAG,IAAK;QAC7BlB,QAAQ,CAACkB,GAAG,CAACC,GAAG,CAAC,CAAC,CAAE;QACpBN,KAAK,CAAC,kBAAkB,CAAC;MAC7B,CAAE;MACFO,aAAa,EAAGC,KAAK,IAAK;QACtBR,KAAK,CAAE,UAASQ,KAAK,CAACC,OAAQ,EAAC,CAAC;MACpC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACF/B,OAAA;MAAAoB,QAAA,gBACIpB,OAAA;QACIgC,WAAW,EAAC,aAAa;QACzBC,IAAI,EAAC,MAAM;QACXC,QAAQ,EAAErB;MAAwB;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF/B,OAAA,CAACN,MAAM;QAACyC,OAAO,EAAElB,YAAa;QAAAG,QAAA,EAAC;MAAW;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnD/B,OAAA,CAACL,IAAI;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAA7B,EAAA,CA3CKD,gBAA0B;EAAA,QACbR,WAAW,EAKTD,WAAW;AAAA;AAAA4C,EAAA,GAN1BnC,gBAA0B;AA6ChC,eAAeA,gBAAgB;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}