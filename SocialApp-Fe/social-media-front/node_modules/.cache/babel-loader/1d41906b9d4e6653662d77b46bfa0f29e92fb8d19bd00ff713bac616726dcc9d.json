{"ast":null,"code":"var _jsxFileName = \"D:\\\\an3_facultate\\\\sem1\\\\IS\\\\laboratoare\\\\SocialApp-Fe\\\\social-media-front\\\\src\\\\components\\\\messaging\\\\ChatOverview\\\\ChatOverview.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { messageSelect } from \"../../../widgets/messaging-overview-widget/model/selectors\";\nimport { Stomp } from '@stomp/stompjs';\nimport { sessionSelect } from \"../../../redux/core/session/selectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatOverview = () => {\n  _s();\n  const currentConversation = useSelector(messageSelect.currentConversation);\n  const dispatch = useDispatch();\n  const jwtToken = useSelector(sessionSelect.jwtToken);\n  const messages = useSelector(messageSelect.currentChat);\n  const myUserId = useSelector(sessionSelect.userId);\n  const [message, setMessage] = useState('');\n  const [connected, setConnected] = useState(false);\n  const connect = () => {\n    const socket = new WebSocket(`ws://localhost:8080/chat/websocket?token=${jwtToken}`);\n    const stompClient = Stomp.over(socket);\n    stompClient.debug = console.log;\n    stompClient.connect({}, () => {\n      setConnected(true);\n      console.log('Connected: ' + stompClient.connected);\n\n      // Subscribing to personal queues based on userId\n      // @ts-ignore\n      const personalQueue = `/user/queue/${myUserId}/${currentConversation.userId}`;\n      stompClient.subscribe(personalQueue, message => {\n        console.log(\"Received personal message\", message.body);\n        dispatch(reduxUpdateMessages());\n      });\n    }, error => {\n      console.error('Connection error:', error);\n    });\n    return stompClient;\n  };\n  const disconnect = stompClient => {\n    if (connected) {\n      stompClient.disconnect(() => {\n        console.log(\"Disconnected\");\n        setConnected(false);\n      });\n    }\n  };\n  const sendMessage = stompClient => {\n    if (connected) {\n      const messagePayload = {\n        senderId: myUserId,\n        receiverId: currentConversation.userId,\n        content: message,\n        timestamp: new Date().toISOString()\n      };\n      stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(messagePayload));\n      setMessage('');\n      dispatch(reduxUpdateMessages());\n    }\n  };\n  useEffect(() => {\n    const stompClient = connect();\n    return () => {\n      disconnect(stompClient);\n    };\n  }, [currentConversation.userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatOverview, \"0573yiddQPGdRh8UBgfm0mGfYag=\", false, function () {\n  return [useSelector, useDispatch, useSelector, useSelector, useSelector];\n});\n_c = ChatOverview;\nexport default ChatOverview;\nvar _c;\n$RefreshReg$(_c, \"ChatOverview\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","messageSelect","Stomp","sessionSelect","jsxDEV","_jsxDEV","ChatOverview","_s","currentConversation","dispatch","jwtToken","messages","currentChat","myUserId","userId","message","setMessage","connected","setConnected","connect","socket","WebSocket","stompClient","over","debug","console","log","personalQueue","subscribe","body","reduxUpdateMessages","error","disconnect","sendMessage","messagePayload","senderId","receiverId","content","timestamp","Date","toISOString","send","JSON","stringify","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/an3_facultate/sem1/IS/laboratoare/SocialApp-Fe/social-media-front/src/components/messaging/ChatOverview/ChatOverview.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {messageSelect} from \"../../../widgets/messaging-overview-widget/model/selectors\";\r\nimport {CompatClient, Stomp} from '@stomp/stompjs';\r\nimport {sessionSelect} from \"../../../redux/core/session/selectors\";\r\n\r\nconst ChatOverview = () => {\r\n    const currentConversation = useSelector(messageSelect.currentConversation);\r\n    const dispatch = useDispatch();\r\n    const jwtToken = useSelector(sessionSelect.jwtToken);\r\n    const messages = useSelector(messageSelect.currentChat);\r\n    const myUserId = useSelector(sessionSelect.userId);\r\n    const [message, setMessage] = useState('');\r\n    const [connected, setConnected] = useState(false);\r\n\r\n    const connect = () => {\r\n        const socket = new WebSocket(`ws://localhost:8080/chat/websocket?token=${jwtToken}`);\r\n        const stompClient = Stomp.over(socket);\r\n        stompClient.debug = console.log;\r\n\r\n        stompClient.connect({}, () => {\r\n            setConnected(true);\r\n            console.log('Connected: ' + stompClient.connected);\r\n\r\n            // Subscribing to personal queues based on userId\r\n            // @ts-ignore\r\n            const personalQueue = `/user/queue/${myUserId}/${currentConversation.userId}`;\r\n            stompClient.subscribe(personalQueue, message => {\r\n                console.log(\"Received personal message\", message.body);\r\n                dispatch(reduxUpdateMessages());\r\n            });\r\n        }, (error: any) => {\r\n            console.error('Connection error:', error);\r\n        });\r\n\r\n        return stompClient;\r\n    };\r\n\r\n    const disconnect = (stompClient: CompatClient) => {\r\n        if (connected) {\r\n            stompClient.disconnect(() => {\r\n                console.log(\"Disconnected\");\r\n                setConnected(false);\r\n            });\r\n        }\r\n    };\r\n\r\n    const sendMessage = (stompClient: { send: (arg0: string, arg1: {}, arg2: string) => void; }) => {\r\n        if (connected) {\r\n            const messagePayload = {\r\n                senderId: myUserId,\r\n                receiverId: currentConversation.userId,\r\n                content: message,\r\n                timestamp: new Date().toISOString()\r\n            };\r\n            stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(messagePayload));\r\n            setMessage('');\r\n            dispatch(reduxUpdateMessages());\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const stompClient = connect();\r\n        return () => {\r\n            disconnect(stompClient);\r\n        };\r\n    }, [currentConversation.userId]);\r\n\r\n    return (\r\n        <div>\r\n            {/* Display message or chat overview based on currentConversation */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatOverview;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}