{"ast":null,"code":"import { request } from \"../../../components/core/Request/request\";\nimport { CONNECTIONS_BASE_URL, CONTENT_BASE_URL } from \"../../../utils/constants\";\nimport { feedPostsSuccess, feedStoriesSuccess, suggestedFriendsSuccess, suggestedPostsSuccess, feedRandomPostsSuccess } from \"./reducers\";\n// Helper function for retrying requests on empty response\n// @ts-ignore\nasync function fetchWithRetryOnEmpty({\n  url,\n  method,\n  headers,\n  dispatch,\n  successAction,\n  maxRetries = 3,\n  currentAttempt = 0\n}) {\n  try {\n    const response = await request({\n      url,\n      method,\n      headers\n    });\n    if (response.data.length === 0 && currentAttempt < maxRetries) {\n      console.log(`Empty response received, retrying attempt ${currentAttempt + 1}...`);\n      await fetchWithRetryOnEmpty({\n        url,\n        method,\n        headers,\n        dispatch,\n        successAction,\n        maxRetries,\n        currentAttempt: currentAttempt + 1\n      });\n    } else {\n      dispatch(successAction(response.data));\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport const dataRequested = async ({\n  userId,\n  jwtToken,\n  dispatch\n}) => {\n  await request({\n    url: CONTENT_BASE_URL + '/getFeedPosts/' + userId,\n    method: 'GET',\n    headers: {\n      'Authorization': \"Bearer \" + jwtToken\n    }\n  }).then(response => {\n    dispatch(feedPostsSuccess(response.data));\n  }).catch(error => {\n    console.error(error);\n  });\n\n  // Use the helper function for fetching random posts\n  await fetchWithRetryOnEmpty({\n    url: CONTENT_BASE_URL + '/getRandomPosts',\n    method: 'GET',\n    headers: {\n      'Authorization': \"Bearer \" + jwtToken\n    },\n    dispatch,\n    successAction: feedRandomPostsSuccess\n  });\n\n  // Other requests remain unchanged\n  await request({\n    url: CONTENT_BASE_URL + '/getFeedStories/' + userId,\n    method: 'GET',\n    headers: {\n      'Authorization': \"Bearer \" + jwtToken\n    }\n  }).then(response => {\n    dispatch(feedStoriesSuccess(response.data));\n  }).catch(error => {\n    console.error(error);\n  });\n  await request({\n    url: CONTENT_BASE_URL + '/getSuggestedPosts/' + userId,\n    method: 'GET',\n    headers: {\n      'Authorization': \"Bearer \" + jwtToken\n    }\n  }).then(response => {\n    dispatch(suggestedPostsSuccess(response.data));\n  }).catch(error => {\n    console.error(error);\n  });\n  await request({\n    url: CONNECTIONS_BASE_URL + '/getSuggestedFriends/' + userId,\n    method: 'GET',\n    headers: {\n      'Authorization': \"Bearer \" + jwtToken\n    }\n  }).then(response => {\n    dispatch(suggestedFriendsSuccess(response.data));\n  }).catch(error => {\n    console.error(error);\n  });\n};","map":{"version":3,"names":["request","CONNECTIONS_BASE_URL","CONTENT_BASE_URL","feedPostsSuccess","feedStoriesSuccess","suggestedFriendsSuccess","suggestedPostsSuccess","feedRandomPostsSuccess","fetchWithRetryOnEmpty","url","method","headers","dispatch","successAction","maxRetries","currentAttempt","response","data","length","console","log","error","dataRequested","userId","jwtToken","then","catch"],"sources":["D:/an3_facultate/sem1/IS/laboratoare/SocialApp-Fe/social-media-front/src/widgets/feed-main-widget/model/effects.ts"],"sourcesContent":["import { request } from \"../../../components/core/Request/request\";\r\nimport { CONNECTIONS_BASE_URL, CONTENT_BASE_URL } from \"../../../utils/constants\";\r\nimport {\r\n    feedPostsSuccess,\r\n    feedStoriesSuccess,\r\n    suggestedFriendsSuccess,\r\n    suggestedPostsSuccess,\r\n    feedRandomPostsSuccess,\r\n} from \"./reducers\";\r\nimport { EffectsPayload } from \"./types\";\r\n\r\n// Helper function for retrying requests on empty response\r\n// @ts-ignore\r\nasync function fetchWithRetryOnEmpty({url, method, headers, dispatch, successAction, maxRetries = 3, currentAttempt = 0}) {\r\n    try {\r\n        const response = await request({ url, method, headers });\r\n        if (response.data.length === 0 && currentAttempt < maxRetries) {\r\n            console.log(`Empty response received, retrying attempt ${currentAttempt + 1}...`);\r\n            await fetchWithRetryOnEmpty({url, method, headers, dispatch, successAction, maxRetries, currentAttempt: currentAttempt + 1});\r\n        } else {\r\n            dispatch(successAction(response.data));\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport const dataRequested = async ({ userId, jwtToken, dispatch }: EffectsPayload) => {\r\n    await request({\r\n        url: CONTENT_BASE_URL + '/getFeedPosts/' + userId,\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': \"Bearer \" + jwtToken\r\n        }\r\n    }).then((response) => {\r\n        dispatch(feedPostsSuccess(response.data));\r\n    }).catch((error) => {\r\n        console.error(error);\r\n    });\r\n\r\n    // Use the helper function for fetching random posts\r\n    await fetchWithRetryOnEmpty({\r\n        url: CONTENT_BASE_URL + '/getRandomPosts',\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': \"Bearer \" + jwtToken\r\n        },\r\n        dispatch,\r\n        successAction: feedRandomPostsSuccess\r\n    });\r\n\r\n    // Other requests remain unchanged\r\n    await request({\r\n        url: CONTENT_BASE_URL + '/getFeedStories/' + userId,\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': \"Bearer \" + jwtToken\r\n        }\r\n    }).then((response) => {\r\n        dispatch(feedStoriesSuccess(response.data));\r\n    }).catch((error) => {\r\n        console.error(error);\r\n    });\r\n\r\n    await request({\r\n        url: CONTENT_BASE_URL + '/getSuggestedPosts/' + userId,\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': \"Bearer \" + jwtToken\r\n        }\r\n    }).then((response) => {\r\n        dispatch(suggestedPostsSuccess(response.data));\r\n    }).catch((error) => {\r\n        console.error(error);\r\n    });\r\n\r\n    await request({\r\n        url: CONNECTIONS_BASE_URL + '/getSuggestedFriends/' + userId,\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': \"Bearer \" + jwtToken\r\n        }\r\n    }).then((response) => {\r\n        dispatch(suggestedFriendsSuccess(response.data));\r\n    }).catch((error) => {\r\n        console.error(error);\r\n    });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}