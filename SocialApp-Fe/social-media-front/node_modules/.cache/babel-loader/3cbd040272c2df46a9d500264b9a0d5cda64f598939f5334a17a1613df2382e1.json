{"ast":null,"code":"var _jsxFileName = \"D:\\\\an3_facultate\\\\sem1\\\\IS\\\\laboratoare\\\\SocialApp-Fe\\\\social-media-front\\\\src\\\\components\\\\messaging\\\\ChatList\\\\ChatList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Plus from '../../../assets/icons/plus.svg';\nimport BText from \"../../core/BText/BText\";\nimport MessageCard from \"../MessageCard/MessageCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeConversation } from \"../../../widgets/messaging-overview-widget/model/reducers\";\nimport { getPersonChats } from \"../../../widgets/messaging-overview-widget/model/effects\";\nimport { sessionSelect } from \"../../../redux/core/session/selectors\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatList = ({\n  username,\n  conversations\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const jwtToken = useSelector(sessionSelect.jwtToken);\n  const profilePicture = useSelector(sessionSelect.profilePicture);\n  const userId = useSelector(sessionSelect.userId);\n  const fullName = useSelector(sessionSelect.fullName);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  useEffect(() => {\n    const darkModeSetting = localStorage.getItem('hasDarkMode') === 'true';\n    setIsDarkMode(darkModeSetting);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-list-widget ${isDarkMode ? 'dark-mode' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-list-header\",\n        children: [/*#__PURE__*/_jsxDEV(BText, {\n          text: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Plus,\n          className: \"chat-list-header-text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(BText, {\n        text: \"Messages\",\n        margin: 20\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), conversations.map((conv, index) => /*#__PURE__*/_jsxDEV(MessageCard, {\n        photo: conv.senderId.userId === userId ? conv.receiverId.profilePicture : conv.senderId.profilePicture,\n        fullName: conv.senderId.userId === userId ? conv.receiverId.firstName + ' ' + conv.receiverId.lastName : conv.senderId.firstName + ' ' + conv.senderId.lastName,\n        message: conv.content,\n        date: conv.timestamp,\n        isRead: conv.isRead,\n        isDarkMode: isDarkMode,\n        onClick: () => {\n          dispatch(changeConversation(conv.senderId.userId === userId ? conv.receiverId : conv.senderId));\n          getPersonChats({\n            userId: userId,\n            jwtToken,\n            dispatch,\n            receiverId: conv.senderId.userId === userId ? conv.receiverId.userId : conv.senderId.userId\n          });\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatList, \"H/tEvVrhs1u3jpglhyBj4Saml5I=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c = ChatList;\nexport default ChatList;\nvar _c;\n$RefreshReg$(_c, \"ChatList\");","map":{"version":3,"names":["React","useEffect","useState","Plus","BText","MessageCard","useDispatch","useSelector","changeConversation","getPersonChats","sessionSelect","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatList","username","conversations","_s","dispatch","jwtToken","profilePicture","userId","fullName","isDarkMode","setIsDarkMode","darkModeSetting","localStorage","getItem","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","src","margin","map","conv","index","photo","senderId","receiverId","firstName","lastName","message","content","date","timestamp","isRead","onClick","_c","$RefreshReg$"],"sources":["D:/an3_facultate/sem1/IS/laboratoare/SocialApp-Fe/social-media-front/src/components/messaging/ChatList/ChatList.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport Plus from '../../../assets/icons/plus.svg';\r\nimport BText from \"../../core/BText/BText\";\r\nimport {Message} from \"../../../widgets/messaging-overview-widget/model/types\";\r\nimport MessageCard from \"../MessageCard/MessageCard\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changeConversation} from \"../../../widgets/messaging-overview-widget/model/reducers\";\r\nimport {getPersonChats, readPersonChat} from \"../../../widgets/messaging-overview-widget/model/effects\";\r\nimport {sessionSelect} from \"../../../redux/core/session/selectors\";\r\n\r\ninterface ChatListProps {\r\n    username: string;\r\n    conversations: Message[];\r\n}\r\n\r\nconst ChatList: React.FC<ChatListProps> = ({username, conversations}) => {\r\n    const dispatch = useDispatch();\r\n    const jwtToken = useSelector(sessionSelect.jwtToken);\r\n    const profilePicture = useSelector(sessionSelect.profilePicture);\r\n    const userId = useSelector(sessionSelect.userId);\r\n    const fullName = useSelector(sessionSelect.fullName);\r\n\r\n    const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const darkModeSetting = localStorage.getItem('hasDarkMode') === 'true';\r\n        setIsDarkMode(darkModeSetting);\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`chat-list-widget ${isDarkMode ? 'dark-mode' : ''}`}>\r\n            <>\r\n            <div className='chat-list-header'>\r\n                <BText text={username}/>\r\n                <img src={Plus} className='chat-list-header-text'/>\r\n            </div>\r\n            <BText text='Messages' margin={20}/>\r\n            {conversations.map((conv, index) =>\r\n                <MessageCard\r\n                    key={index}\r\n                    photo={conv.senderId.userId === userId ? conv.receiverId.profilePicture : conv.senderId.profilePicture}\r\n                    fullName={ conv.senderId.userId === userId\r\n                        ? conv.receiverId.firstName + ' ' + conv.receiverId.lastName\r\n                        : conv.senderId.firstName + ' ' + conv.senderId.lastName}\r\n                    message={conv.content}\r\n                    date={conv.timestamp}\r\n                    isRead={conv.isRead}\r\n                    isDarkMode={isDarkMode}\r\n                    onClick={() => {\r\n                        dispatch(changeConversation(conv.senderId.userId === userId ? conv.receiverId : conv.senderId));\r\n\r\n                        getPersonChats(\r\n                            {\r\n                                userId: userId,\r\n                                jwtToken,\r\n                                dispatch,\r\n                                receiverId: conv.senderId.userId === userId ? conv.receiverId.userId : conv.senderId.userId})\r\n                    }}/>\r\n            )}\r\n            </>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}